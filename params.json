{"name":"Disruptor Illustrated","tagline":"","body":"# What is disruptor\r\nLMAX disruptor is a high performance alternative to bounded queues for exchanging data between concurrent threads. because of its high performance, disruptor is first applied in financial and messaging systems.\r\n\r\n![Throughput](images/throughput.png \"disruptor throughput compared to queue\")\r\n\r\n![Latency](images/latency.png \"latency compared to queue\")\r\n\r\nWhy is disruptor so fast, because it shows mechanical sympathy to modern CPU designs. In following paragraphs, I will try to explain this step by step.\r\n\r\n> Technology is similar, thought behind is the key.\r\n\r\n# parallel programming\r\n\r\n## real world\r\n\r\nThe idea behind disruptor is similar to real world cases. imaging you are the boss of fast food restaurant, what are you supposed to do to serve more customers? You can hire a waitress with fast hands.\r\n\r\n![Fasthand](images/fasthand.jpg)\r\n\r\nHowever the speed of waitress is limited, so you hire another waitress. Now the two waitresses process requests in parallel, and the total throughput is doubled.\r\n\r\n![Morewaitress](images/morewaitress.png)\r\n\r\n## technology world \r\n\r\nParallel programming. with a high speed CPU processor speed, programs can run fast, result in higher throughput and lower latency. However CPU speed is limited to several GHZ, so more CPU cores are introduced, and programs need to run in parallel. the cpu speed no longer obey moore law, but the core numbers still obey.\r\n\r\n![Moore svg](Moore.svg \"CPU speed is limited, but the core numbers still obey Moore's law\")\r\n\r\n# staged processing\r\n\r\n## real world\r\n\r\nYour restaurant grows rapidly, so you must extend your business to more cities, even more counties. As the boss you can not manage all of your employee by yourself, instead you hire managers. \r\n\r\n![Organization charts](organization.png \"organization is composed of multiple stages\")\r\n\r\n## technology world\r\n\r\nA program is also split into multiple stages, and every stage compute in parallel. by increasing number of processors, the program speed up. \r\n\r\n# Amdahl's law\r\n\r\nIn real world there is all kind of inefficiency. one department may depend on another. In a program, how can we optimize process in such a parallel and staged environment? Here comes the Amdahl's law.\r\n\r\n**Amdahl's law**\r\n\r\nThe speedup of a program using multiple processors in parallel computing is limited by the time needed for the sequential fraction of the program. If %5 of the program cannot compute in parallel, the speedup can only reach 20 times no matter how many processors there are. \r\n\r\n![Amdahl law](amdahl.png)\r\n\r\n# optimization\r\nNo matter in real or technology world, to remove inefficiency, just find the bottleneck that can not run in parallel.\r\n\r\n## real world\r\n\r\nmanager collect status of employees, but they do not send to you one by one, instead they wait until all the status is collected, and send to you in a batch.\r\n\r\n## technology world\r\n\r\nModern CPU has multiple level caches, since access main memory is expensive, the cache batch read data from main memory. Cache miss result in main memory access. \r\n\r\nDisruptor use ring buffer to place objects pad together in memory so as to avoid false sharing and cache miss.\r\n\r\n![cpu cache](cpucache.png)\r\n\r\n![ringbuffer](ringbuffer.png)\r\n\r\n## real world\r\n\r\nstaff manager and quality manager both manage employee. they can exchange status of employee directly since their offices are close to each other.\r\n\r\n## technology\r\n\r\nsynchronization for shared resource is expensive. \r\n\r\n1. Lock: involves context switch, which is quite expensive.\r\n1. CAS: lock instruction pipeline and complex to program.\r\n\r\n![Lock penalty](lockpenalty.png)\r\n\r\n### Lock free\r\n\r\nTwo cores in CPU talk to each other directly via memory barriar to exchange resource state. \r\n\r\n![Memory barriar](memory barriar.png)\r\n\r\n# Reference\r\nMemory Barriers: a Hardware View for Software Hackers","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}