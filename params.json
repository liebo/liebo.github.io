{"name":"Disruptor Illustrated","tagline":"","body":"# technology is similar, thought behind is the key\r\n\r\nso we start from the real world examples, we will find the idea behind technology is counterpart of real world cases.\r\n\r\n# queue problem\r\n## real world\r\nconsider the basic queue processing, a lot of people need to buy their meals. as the boss of fast food, what are you supposed to do to serve more customers? imagine you employ only one waitress, so only one queue process all request. in order to improve throughput, the waitress must have fast hands. this is called scale up\r\n\r\n![Fasthand](images/fasthand.png)\r\n\r\nhowever the speed of waitress has a limit, if you can not hire a waitress with faster hand, what would you do? yes! hire another waitress, so the two waitress can process request parallel, and the total throughput is doubled. this is called scale out\r\n\r\n![Morewaitress](images/morewaitress.png)\r\n\r\n## technology world \r\nwhat is the technology counterpart? Parallel programming. when the cpu processor speed can increase, only one core is needed, and all the request is processed serial, the processor speed increase results in throughput and latency improvement. but now the cpu speed can not increase any more over 3GHZ, so more cores are introduced, and parallel programming is a must. the cpu speed no longer obey moore law, but the core numbers still obey.\r\n\r\n![Moore svg](Moore.svg)\r\n\r\n# staged\r\n\r\n## real world\r\nYour fast food is now grows rapidly, so you must extend your business to multiple cities, even multiple counties, so how request are processed? Again all the fast food is processing request in parallel, how ever as the boss you still need manage all the employees. but you can not manage all of them by yourself, so you hire managers to manager part of employers, and let them report to you. an organization layer forms. in this organization, there is multiple stages, any stage is responsible to process requests and then pass batch results to up stage. \r\n\r\n![Organization charts](organization.png)\r\n\r\n## technology world\r\n\r\nA program is split into multiple stages, and every stage compute in parallel. by increase number of processors, the compute is speed up. \r\n\r\n# speedup\r\n\r\ncan we speed up all the time? In real world there is all kind of inefficiency. one department must depend on another. How can we optimize process? here comes the Amdahl's law.\r\n\r\n**Amdahl's law**\r\n\r\nThe speedup of a program using multiple processors in parallel computing is limited by the time needed for the sequential fraction of the program. if %5 of the program cannot compute in parallel, the speedup can only reach 20 times no matter how many processors there are. \r\n\r\n![Amdahl law](amdahl.png)\r\n\r\n# optimization\r\nfind the bottleneck cant not parallel.\r\n\r\n## real world\r\n\r\none way to remove dependency between departments in the same stage\r\n\r\n## disruptor\r\n        \r\n        kernel context switch\r\n\tcas complex and lock instruction pipeline\r\n\tdisruptor lock free\r\n\tdisruptor use sequence\r\n\tmemory barriar\r\n\tinvalidate queue\r\n\twrite in order\r\n\tread in order\r\n\tno need access main memory\r\n\r\n## real world\r\n\r\nbatch\r\n\r\n## disruptor\r\n\r\n        l1 l2 l3 cache main memory\r\n\tcache line padding\r\n\tfalse sharing\r\n\tdisruptor use ringbuffer\r\n\r\n# effect of disruptor\r\n\r\n\r\n\r\n1.1 排队问题：两个性能指标：吞吐量、延时\r\n1.2 串行：麦当劳收银员，换一个动作快的，吞吐量/延时线性提高。Scale up \r\n1.3 摩尔定律适用\r\n1.4 并行：增加一个收银员，吞吐量线性提高/延时不变 Scale out\r\n1.5 Admal定律适用\r\n1.6 分层体系结构，总店、分店、并行运作，职责划分不同\r\n2. Disruptor：CPU level 并行计算，进程内通信\r\n2.1 Mechanical Sympathy\r\n    找出系统中不能并行的瓶颈，并避免之\r\n2.2 队列，有锁，任何类型的锁都是瓶颈，\r\n2.2.1 Lock & CAS\r\n2.2.2 Disruptor使用Memory Barrier保证多核之间的数据同步\r\n2.3 多级Cache，内存拷贝操作，比较慢，batch\r\n2.4 Disruptor Effect: 1. Throughput 2. Latency\r\n3. Parallel并行提高性能的其他应用\r\n3.1 BigPipe\r\n3.2 Reactive programming 响应式编程","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}