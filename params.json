{"name":"Disruptor Illustrated with Metaphor","tagline":"","body":"# What is disruptor\r\nLMAX disruptor is a high performance alternative to bounded queues for exchanging data between concurrent threads. Because of its high performance, disruptor is first applied in financial and messaging systems.\r\n\r\ndisruptor throughput compared to queue    \r\n![Throughput](images/throughput.png)\r\n\r\nlatency compared to queue    \r\n![Latency](images/latency.png)\r\n\r\nWhy is disruptor so fast, because it shows mechanical sympathy to modern CPU designs. In following paragraphs, I will try to explain this with metaphor.\r\n\r\n> <p>\r\n> Technology is similar, thought behind is the key.\r\n> <p>\r\n\r\n# parallel programming\r\n\r\n_The idea behind Disruptor is similar to real world cases. imaging you are the boss of fast food restaurant, what are you supposed to do to serve more customers? You can hire a waitress with fast hands._\r\n\r\nWaitress with fast hands    \r\n![Fasthand](images/fasthand.jpg)\r\n\r\n_However the speed of waitress is limited, so you hire another waitress. Now the two waitresses process requests in parallel, and the total throughput is doubled._\r\n\r\nhire two waitresses    \r\n<img src=\"images/morewaitress.gif\" alt=\"Morewaitress\" width=\"500\">\r\n\r\nParallel programming is just the same. with a high speed CPU, programs can run fast, result in high throughput and low latency. However CPU speed is limited to several GHZ, so more CPU cores are introduced, and programs need to run in parallel. \r\n\r\nCPU speed is limited, but the core numbers obey Moore's law    \r\n![Moore svg](images/moore.jpg \"CPU speed is limited, but the core numbers still obey Moore's law\")\r\n\r\n# staged processing\r\n\r\n_Your restaurant grows rapidly, so you must extend your business to more cities, even more counties. As the boss you can not manage all of your employee by yourself, instead you hire managers._\r\n\r\nan organization is composed of multiple stages    \r\n![Organization charts](images/organizational_charts.gif)\r\n\r\nModern CPU has multiple level caches, and the architecture is similar to an organization.\r\n\r\nCPU cache contains multiple stages    \r\n![CPU cache](images/cache.png)\r\n\r\n# Amdahl's law\r\n\r\n_In real world there is all kind of inefficiency, one department may depend on another._ \r\n\r\nIn a program, how can we optimize process in such a parallel and staged environment? Here comes the Amdahl's law.\r\n\r\n**Amdahl's law**\r\n\r\nThe speedup of a program using multiple processors in parallel computing is limited by the time needed for the sequential fraction of the program. If %5 of the program cannot compute in parallel, the speedup can only reach 20 times no matter how many processors there are. \r\n\r\nAmdahl's law    \r\n![Amdahl's law](images/amdahl.png)\r\n\r\n# optimization\r\n\r\n## Batch message\r\nTo remove inefficiency, just find the bottleneck that can not run in parallel.\r\n\r\n_manager collect status of employees, but they do not send to you one by one, instead they wait until all the status is collected, and send to you in a batch._\r\n\r\nSimilarly, CPU caches is split to cache lines, since access main memory is expensive, the cache batch read data from main memory. Cache miss result in main memory access. \r\n\r\nDisruptor use ring buffer to place objects pad together in memory so as to avoid false sharing and cache miss.\r\n\r\nring buffer    \r\n![ringbuffer](images/ringbuffer.jpg)\r\n\r\n## Synchronization\r\n\r\n_staff manager and product manager both collect information from employees. they can exchange status of employees directly since their offices are close to each other._\r\n\r\nsynchronization for shared resource is expensive. \r\n\r\n1. Lock: involves context switch, which is quite expensive.\r\n1. CAS: lock instruction pipeline and complex to program.\r\n\r\nlock penalty    \r\n![Lock penalty](images/lockpenalty.png)\r\n\r\nDisruptor use lock free memory barrier to synchronize sequence of ring buffer. Two cores in CPU talk to each other directly via memory barrier to exchange resource state. \r\n\r\nmemory barrier    \r\n![Memory barrier](images/memorybarrier.png)\r\n\r\n# Reference\r\nMemory Barriers: a Hardware View for Software Hackers","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}