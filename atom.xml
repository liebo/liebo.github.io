<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The only Unchanged is Change itself]]></title>
  <link href="http://liebo.github.io/atom.xml" rel="self"/>
  <link href="http://liebo.github.io/"/>
  <updated>2014-04-08T21:51:42+08:00</updated>
  <id>http://liebo.github.io/</id>
  <author>
    <name><![CDATA[liebo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[软件开发之道——程序员的坏习惯]]></title>
    <link href="http://liebo.github.io/blog/2014/04/08/ruan-jian-kai-fa-zhi-dao-cheng-xu-yuan-de-pi-xi-guan/"/>
    <updated>2014-04-08T20:44:32+08:00</updated>
    <id>http://liebo.github.io/blog/2014/04/08/ruan-jian-kai-fa-zhi-dao-cheng-xu-yuan-de-pi-xi-guan</id>
    <content type="html"><![CDATA[<p>近两个月兼任移动与桌面客户端的架构工作，与以前喜好单打独斗的程序员们打交道的过程中，发现一些程序员常有的一些不好的习惯</p>

<h3>不重视单元测试，对测试有误解</h3>

<p>开发工程师倾向于完成功能之后，立即交付测试工程师手动测试或者上层调用者测试，测试有问题再打回来修改bug，如果要求交付之前写单元测试，则认为是在阻碍功能交付的进度，仿佛&#8221;任何阻碍我尽快的完成功能开发的行为都是与我有不共戴天之仇&#8221;。</p>

<p>表面上写单元测试是多花了时间，实际上等发现bug再打回来重写，这中间产生的沟通成本要大得多，于是出现这样的情况：两个星期把一系列功能完成，而真正稳定可发布则要两个月时间，绝大部分时间耗费在测试，修改bug这种来回的扯皮中。</p>

<p>敏捷开发认为单元测试是成本最小的，一个bug在单元测试阶段发现的成本比起功能测试时才发现要小得多。单元测试虽然是一种白盒测试，但是测试点仍然是对象的接口，白盒主要体现在依赖注入上，单元测试的过程本身就是验证接口设计的过程，甚至在TDD里设计本身就是由测试驱动的。单元测试可以细粒度的检测bug，可以把因素锁定在有限的范围内，并最快的速度迭代，比起功能开发完再测试，成本要小一个量级。我们希望看到的是可以持续的交付，两个星期一个迭代完成功能，同时测试也通过。</p>

<p>合理的对象建模，面向接口的设计，Mock注入，Expect框架等测试自动化框架和工具的使用，可以有效的提高测试的效率。</p>

<h3>害怕变化</h3>

<p>在多人协作，模块化开发中，上层应用的开发者希望下层模块把接口提前设计的完美，接口定了之后最好不要有任何变化，否则改动的影响可能会非常大。这个要求其实也无可厚非，但是敏捷开发告诉我们，这种思路是太理想化的，接口也需要迭代过程中不断完善，需求和架构都是在迭代过程中逐渐清晰的。我们设计领域和事件模型，采纳MVC框架，模块化和层次结构设计，依赖注入等等，无非是为了一点，变化的时候改动的成本尽可能小。快速的迭代，细粒度的重构也是减小变化成本的必须。</p>

<p>程序员不仅不要害怕变化，而且要带着积极的心态拥抱变化。</p>

<h3>缺乏安全感</h3>

<p>很多程序员不喜欢讨论内部的设计，而喜欢对外的API接口设计。他们认为如果太过透明，一是侮辱自己的智商，二是影响自己在项目中的不可或缺性，最好把自己的实现功能作为一个黑盒子给别人，只要自己能够最快的把这个黑盒子实现，就是个人能力的体现。这实在是很短视的一种思想，不过考虑到国内软件企业的现状，倒也情有可原，因为最终的考核都是基于工作量和在项目中的不可或缺性。程序员应该有更高的追求，作为一个团队的一员，以科学的方法论指导工作，保证促进团队的整体效率。而作为个人考核的度量则是新的技术解决难题，引进了新的方法提高了效率等，只有不断进步才能体现个人价值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[双向数据绑定UML类图设计]]></title>
    <link href="http://liebo.github.io/blog/2014/04/05/shuang-xiang-shu-ju-bang-ding-umllei-tu-she-ji/"/>
    <updated>2014-04-05T17:08:02+08:00</updated>
    <id>http://liebo.github.io/blog/2014/04/05/shuang-xiang-shu-ju-bang-ding-umllei-tu-she-ji</id>
    <content type="html"><![CDATA[<p>面向对象设计第一步是设计类的继承结构和类的实例依赖组合关系，而最好的表达莫过于UML类图。</p>

<p>考虑一个支持数据双向绑定的GridView的设计，首先设计ViewModel的类继承和对象关系</p>

<p><img src="http://yuml.me/diagram/nofunky;dir:LR;/class/[BaseViewModel%7C+bind(BaseView%20view);],%20[BaseViewModel]%5E-%3E[CellViewModel],%20[BaseViewModel]%5E-%3E[ListViewModel]" alt="ViewModel类体系" /></p>

<p><img src="http://yuml.me/diagram/nofunky;dir:LR;/class/[ListViewModel]++-0..*%3E[BaseViewModel]" alt="ViewModel对象关系" /></p>

<p>以及View的类体系结构</p>

<p><img src="http://yuml.me/diagram/nofunky;dir:LR;/class/[BaseView%7C+bind(BaseViewModel%20vm);],%20[BaseView]%5E-%3E[ListView],%20[BaseView]%5E-%3E[CellView],%20[ListView]%5E-%3E[LineView],%20[ListView]%5E-%3E[GridView]" alt="View继承体系" /></p>

<p><img src="http://yuml.me/diagram/nofunky;dir:LR;/class/%20[LineView]++-0..*%3E[CellView],%20[GridView]++-0..*%3E[LineView]" alt="View对象结构" /></p>

<p>最后处理双向绑定关系</p>

<p><img src="http://yuml.me/diagram/nofunky;dir:LR;/class/[BaseView]1-1[BaseViewModel],%20[ListView]1-1[ListViewModel],%20[CellView]1-1[CellViewModel]" alt="双向绑定" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[响应式编程(Reactive Programming)：自动恢复的能力(Resilience)]]></title>
    <link href="http://liebo.github.io/blog/2014/04/04/xiang-ying-shi-bian-cheng-reactive-programming-%3Ashi-xiao-hui-fu-resilience/"/>
    <updated>2014-04-04T15:35:19+08:00</updated>
    <id>http://liebo.github.io/blog/2014/04/04/xiang-ying-shi-bian-cheng-reactive-programming-:shi-xiao-hui-fu-resilience</id>
    <content type="html"><![CDATA[<p>传统的应用在处理错误时</p>

<ul>
<li>粒度太粗，出现错误时，整个服务终止，然后做失效恢复，自动化一点的比如集群某一节点失效之后的Failover</li>
<li>粒度太细，出现错误时，在错误出现的位置处理，典型的，比如根据函数返回值做判断。Java中的异常处理虽然可以交给调用堆栈的上级对象方法处理，仍然只能在有限的范围内处理，不能异步处理，而且将正常的应用逻辑和错误处理混在一起。</li>
</ul>


<p>响应式编程要求应用快速响应错误，并快速的自动恢复，不影响业务逻辑的正常运作。这要求将错误也作为一种事件抛出，交给Supervisor角色去异步处理，而正常的业务逻辑与Supervisor是分开的，不会受到影响。把错误作为一等国民对待，对错误建模，在应用设计过程中一开始就考虑错误处理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件开发之道——面向对象设计是方法论]]></title>
    <link href="http://liebo.github.io/blog/2014/04/03/ruan-jian-kai-fa-zhi-dao-mian-xiang-dui-xiang-she-ji-shi-fang-fa-lun/"/>
    <updated>2014-04-03T17:27:58+08:00</updated>
    <id>http://liebo.github.io/blog/2014/04/03/ruan-jian-kai-fa-zhi-dao-mian-xiang-dui-xiang-she-ji-shi-fang-fa-lun</id>
    <content type="html"><![CDATA[<p>有人吐槽面向对象设计过于复杂，只要Design by Contract，Prefer Composition over Inheritance，Loose Couple就可以了。我要说，这样的认识层次还不够高。这就好比，因为红学家把红楼梦整的特玄乎，而认为红楼梦本身不是好作品。</p>

<p>面向对象分析与设计，是一种方法论，是我们认识世界和改造世界的方法的理论。接口，继承，多态，SOLID等等都只是表象，我们需要做的是透过现象看到本质——那就是，不要从一开始就尝试去具体解决一个问题，或者实现一个需求，而是去描述一个问题，即建模。面向对象设计只是众多建模方式的一种，函数式编程以函数为中心建模，状态机以状态和变迁为中心建模，而面向对象以对象为中心建模则是最符合人们对客观世界的认识的。正如做人一样，有自己的世界观作为准则，做事的时候不必拘泥于具体的某个方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 项目模块化开发]]></title>
    <link href="http://liebo.github.io/blog/2014/04/02/android-xiang-mu-mo-kuai-hua/"/>
    <updated>2014-04-02T21:02:43+08:00</updated>
    <id>http://liebo.github.io/blog/2014/04/02/android-xiang-mu-mo-kuai-hua</id>
    <content type="html"><![CDATA[<p>伴随移动设备的智能化，移动应用呈现出爆发式的增长。当应用多了以后，应用框架也就自然而然的提上日程。框架设计的第一步就是模块化，实现公共模块和应用模块，模块之间通过接口通信，然后才可能去更进一步的考虑依赖注入，MVC框架，领域和事件模型。Android在模块化方面继承了Java的特点，允许以jar包的方式组织和发布模块，不同的是Android必须将jar包打包进apk，不支持从ClassPath动态载入模块。</p>

<p>在Android模块依赖管理有两个经常遇见的问题：</p>

<ol>
<li>为了将依赖的jar打包进apk，不仅仅要将jar加入依赖列表，还需要指定jar是Exportable的。在Eclipse下，要将jar的路径加入Build Path，还需要将其加入Export Path。用maven来进行模块构建以及依赖管理时，要将依赖的项目加入dependencies列表，并且注意scope不能指定为provided。如果打包好的apk在运行时报错，可以分析一下logcat的输出，如果发现NoClassDefFound之类的错误，则说明有一些依赖的包没有Export（另一个引起这个错误的原因是代码混淆没有配置好，这个以后再讨论）。有时候子类的定义没有找到的话，也会报父类找不到，所以需要仔细的看日志，找到根源的类。有时候Eclipse编译出来的apk可用，maven编译的不可用，这个时候可以考虑解压缩apk和反编译dex，找到maven编译的apk缺少的包和类。</li>
<li>有一些依赖的jar包只是编译期需要，而在运行时是不需要的，比如javax开头的包，在Eclipse下，不需要Export，而maven则需要指定其scope为provided。</li>
</ol>


<p>最后，再强调一下，仔细的分析log，不能忽视任何警告和错误信息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件开发之道——演绎思维到归纳思维的转换]]></title>
    <link href="http://liebo.github.io/blog/2014/03/31/ruan-jian-kai-fa-zhi-dao-yan-yi-si-wei-dao-gui-na-si-wei-de-zhuan-huan/"/>
    <updated>2014-03-31T10:35:37+08:00</updated>
    <id>http://liebo.github.io/blog/2014/03/31/ruan-jian-kai-fa-zhi-dao-yan-yi-si-wei-dao-gui-na-si-wei-de-zhuan-huan</id>
    <content type="html"><![CDATA[<p>从面向过程到面向对象是一种思维方式的转变。面向过程是演绎思维，从一般到特殊，是由上而下的解决一个问题；而面向对象是归纳思维，从特殊到一般，是由下而上的描述一个问题</p>

<p>我们可以看到现代软件工程也是逐渐的从演绎向归纳变化：</p>

<ol>
<li>面向过程是演绎思维，因为其关注的是流程，具体的怎样解决一个问题，表现为函数的逻辑组装。
面向对象是归纳思维，其关注的是对象建模，先抽象出共性和对象之间的关系。</li>
<li>同步编程是演绎思维，所谓同步就是一根筋，把问题分解为几个步骤，每一步都依赖于上一步的结果。
异步编程是归纳思维，整个系统通过异步事件驱动，所以要先抽象出事件模型。</li>
<li>瀑布模型是演绎思维，计划式的开发，一开始就关注具体的业务，每一步计划都依赖于上一步的计划，从一开始就希望控制整个过程。
敏捷模型是归纳思维，演进式的开发，要求从一开始归纳出最基本的Task，然后逐渐演化到更具体的业务，其实和面向对象从接口到具现类是一个道理</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disruptor Illustrated by Metaphor]]></title>
    <link href="http://liebo.github.io/blog/2014/03/29/disruptor-illustrated-by-metaphor/"/>
    <updated>2014-03-29T22:02:36+08:00</updated>
    <id>http://liebo.github.io/blog/2014/03/29/disruptor-illustrated-by-metaphor</id>
    <content type="html"><![CDATA[<h1>What is disruptor</h1>

<p>LMAX disruptor is a high performance alternative to bounded queues for exchanging data between concurrent threads. Disruptor is first applied in financial and messaging systems for its high performance.</p>

<p>Disruptor throughput compared to queue  <br/>
<img src="http://liebo.github.io/images/disruptor/throughput.png" alt="Throughput" /></p>

<p>Latency compared to queue  <br/>
<img src="http://liebo.github.io/images/disruptor/latency.png" alt="Latency" /></p>

<p>Showing mechanical sympathy to modern CPU designs, disruptor is so fast in a parallel and staged environment. Following explains this in detail.</p>

<h1>Parallel Programming</h1>

<p>The best way to explain technology is by metaphor. As is said:</p>

<blockquote><p><p>
Technology is similar, thought behind is the key.
<p></p></blockquote>

<h2>Metaphor in real world</h2>

<p><em>You are the boss of a fast food restaurant, what are you supposed to do to serve more customers? You hire a waitress with fast hands.</em></p>

<p>Waitress with fast hands  <br/>
<img src="http://liebo.github.io/images/disruptor/fasthand.jpg" alt="Fasthand" /></p>

<p><em>However the speed of waitress is limited, so you hire another waitress. Now the two process requests in parallel, and total throughput is doubled.</em></p>

<p>Hire two waitresses  <br/>
<img src="http://liebo.github.io/images/disruptor/morewaitress.gif" alt="Morewaitress" width="500"></p>

<h2>Technology</h2>

<p>Parallel programming is just the same. with a high speed CPU, programs can run fast, result in high throughput and low latency. However CPU speed is limited to several GHZ, so more CPU cores are introduced, and programs can run in parallel.</p>

<p>CPU speed is limited, but the core numbers obey Moore&rsquo;s law  <br/>
<img src="http://liebo.github.io/images/disruptor/moore.jpg" alt="Moore's law" /></p>

<h1>Staged processing</h1>

<h2>Metaphor</h2>

<p><em>Your restaurant grows rapidly, so you must extend your business to more cities, even more countries. As the boss you can not manage all of your employee by yourself, instead you hire managers.</em></p>

<p>an organization is composed of multiple stages  <br/>
<img src="http://liebo.github.io/images/disruptor/organizational_charts.gif" alt="Organization charts" /></p>

<h2>Technology</h2>

<p>Modern CPU has multiple level caches, and the architecture is similar to an organization.</p>

<p>CPU cache contains multiple stages  <br/>
<img src="http://liebo.github.io/images/disruptor/cache.png" alt="CPU cache" /></p>

<h1>Amdahl&rsquo;s law</h1>

<h2>Metaphor</h2>

<p><em>In real world there is all kind of inefficiency, one department may depend on another. That&rsquo;s why management theories exists.</em></p>

<h2>Technology</h2>

<p>In a program, how can we optimize process in such a parallel and staged environment?</p>

<p><strong>Amdahl&rsquo;s law</strong></p>

<p>The speedup of a program using multiple processors in parallel computing is limited by the time needed for the sequential fraction of the program. If %5 of the program cannot compute in parallel, the speedup can only reach 20 times no matter how many processors there are.</p>

<p>Amdahl&rsquo;s law  <br/>
<img src="http://liebo.github.io/images/disruptor/amdahl.png" alt="Amdahl's law" /></p>

<p>To remove inefficiency, just find the bottleneck that can not run in parallel, namely avoid shared resources.</p>

<h1>Optimization: Batch message</h1>

<p>The first bottleneck is main memory access, which is expensive.</p>

<h2>Metaphor</h2>

<p><em>Manager collect status of employees, but they do not send to the boss you one by one, instead they wait until all the status are collected, and send to you in a batch.</em></p>

<h2>Technology</h2>

<p>Similarly, CPU cache is split to cache lines, and batch read data from main memory.</p>

<p>Disruptor use ring buffer to place objects padding together in memory so as to avoid false sharing and cache miss.</p>

<p>Ring buffer  <br/>
<img src="http://liebo.github.io/images/disruptor/ringbuffer.jpg" alt="ringbuffer" /></p>

<h1>Optimization: Lock free synchronization</h1>

<p>Another bottleneck is shared locks.</p>

<h2>Metaphor</h2>

<p><em>People manager and product manager both manage employees. They can exchange status of employees directly since their offices are close to each other.</em></p>

<h2>Technology</h2>

<p>Synchronization for shared resource is expensive.</p>

<ol>
<li>Lock: involves context switch, which is quite expensive.</li>
<li>CAS: lock instruction pipeline and complex to program.</li>
</ol>


<p>lock penalty  <br/>
<img src="http://liebo.github.io/images/disruptor/lockpenalty.png" alt="Lock penalty" /></p>

<p>Disruptor use lock free memory barrier to synchronize sequence of ring buffer. Two cores in CPU talk to each other directly via memory barrier to exchange resource state, so as to avoid accessing shared locks.</p>

<p>memory barrier  <br/>
<img src="http://liebo.github.io/images/disruptor/memorybarrier.png" alt="Memory barrier" /></p>

<h1>Reference</h1>

<ol>
<li><a href="http://lmax-exchange.github.io/disruptor/">LMAX disruptor on github</a></li>
<li><a href="http://disruptor.googlecode.com/files/Disruptor-1.0.pdf">Disruptor Technical Paper</a></li>
<li><a href="http://mechanical-sympathy.blogspot.com/">Mechanical sympathy</a></li>
<li><a href="http://www.infoq.com/presentations/LMAX">Disruptor presentation@QCON</a></li>
<li><a href="http://en.wikipedia.org/wiki/Moore_Law">Moore&rsquo;s law@Wikipedia</a></li>
<li><a href="http://en.wikipedia.org/wiki/Amdahl's_law">Amdahl&rsquo;s law@Wikipedia</a></li>
<li><a href="http://en.wikipedia.org/wiki/Circular_buffer">Ring buffer@Wikipedia</a></li>
<li><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CDAQFjAA&amp;url=http%3A%2F%2Fwww.rdrop.com%2F~paulmck%2Fscalability%2Fpaper%2Fwhymb.2009.04.05a.pdf&amp;ei=cJfUUrS5BM2CogSWy4DIAw&amp;usg=AFQjCNHA6MjCwoLJFe5dQTye_uI9dimTNg&amp;sig2=tU3Q4l6EbVsTMf7fOqH5hA">Memory Barriers: a Hardware View for Software Hackers</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
